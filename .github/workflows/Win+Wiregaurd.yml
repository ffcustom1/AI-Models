name: WINCI

on: workflow_dispatch

jobs:
  build:
    runs-on: windows-latest

    steps:
    #- name: Install brave
    #  run: choco install brave -y
    - name: Download and Install Playit
      run: |
        Invoke-WebRequest -Uri "https://github.com/playit-cloud/playit-agent/releases/download/v0.15.26/playit-windows-x86_64-signed.exe" -OutFile "$env:USERPROFILE\playit.exe"
        Start-Sleep -Seconds 5  # Give some time for the download to complete
        
    # Default, optional.
    - name: Enable TS
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

    - name: Configure RDP User Password
      run: |
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "p@ssw0rd!" -Force)

    - name: Create batch file on desktop
      run: |
        Write-Host "Creating batch file to generate signal file..."
        $content = '@echo off
        setlocal
        echo Creating signal_file.txt... && echo. > C:\signal_file.txt && echo Signal file created successfully.
        pause
        endlocal'
        Set-Content -Path "$env:USERPROFILE\Desktop\create_signal_file.bat" -Value $content
        Write-Host "Batch file 'create_signal_file.bat' created successfully."

    - name: Install WireGuard silently via CMD
      shell: cmd
      run: |
        curl -L -o "%TEMP%\wireguard-installer.exe" https://download.wireguard.com/windows-client/wireguard-installer.exe
        "%TEMP%\wireguard-installer.exe" /install /quiet

    - name: Close WireGuard GUI after install
      shell: powershell
      run: |
        Start-Sleep -Seconds 5  # Give WireGuard time to launch
        Get-Process -Name "WireGuard" -ErrorAction SilentlyContinue | Stop-Process -Force


    - name: Download server_test.conf and network_enable.exe
      shell: cmd
      run: |
        curl -L -o "%USERPROFILE%\Downloads\network_enable.exe" https://raw.githubusercontent.com/ffcustom1/AI-Models/main/network_enable.exe
        curl -L -o "%USERPROFILE%\Downloads\server_test.conf" https://raw.githubusercontent.com/ffcustom1/AI-Models/main/server_test.conf

    - name: Activate WireGuard tunnel using config
      shell: cmd
      run: |
        "C:\Program Files\WireGuard\wireguard.exe" /installtunnelservice "C:\Users\runneradmin\Downloads\server_test.conf"


    - name: Start Playit tunnel in background
      shell: pwsh
      run: |
        Write-Host "Starting Playit and setting up RDP tunnel in background..."
    
        $playitPath = "$env:USERPROFILE\playit.exe"
        $secret = "6de6092d72c9c696f80fa7a208fd7bb13b4ae635c21d07a15e035dd08bb27e11"
    
        Start-Process -FilePath $playitPath -ArgumentList "--secret $secret" -WindowStyle Hidden
    
        Write-Host "âœ… Playit tunnel started successfully in the background."

    - name: Minimize all windows
      shell: powershell
      run: |
        (New-Object -ComObject shell.application).MinimizeAll()


    - name: Start network_enable.exe in background as admin and wait
      shell: powershell
      run: |
        Start-Process -FilePath "C:\Users\runneradmin\Downloads\network_enable.exe" -Verb RunAs
        Start-Sleep -Seconds 40


    - name: Start Playit and Set Up RDP Tunnel & Wait for Signal File
      env:
        PLAYIT_AUTH_KEY: ${{ secrets.PL }} 
      run: |
        Write-Host "Starting Playit and setting up RDP tunnel..."
        Start-Process -FilePath "$env:USERPROFILE\playit.exe" -ArgumentList "--secret $env:PLAYIT_AUTH_KEY" -NoNewWindow
        #Start-Process -FilePath "$env:USERPROFILE\playit.exe" -NoNewWindow
        Write-Host "Playit tunnel started successfully."

        Write-Host "Waiting for signal file..."
        $signalFile = "C:\signal_file.txt"
        $retryCount = 0
        $maxRetries = 9999
        while (-not (Test-Path $signalFile)) {
          Write-Host "Signal file not found, waiting for 60 seconds..."
          Start-Sleep -Seconds 60
          $retryCount++
          if ($retryCount -ge $maxRetries) {
            Write-Host "Maximum retries reached. Signal file not found."
            exit 1
          }
        }
        Write-Host "Signal file detected. Workflow complete."
